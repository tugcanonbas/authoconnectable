# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down
#
version: '3.7'

volumes:
  db_data:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST: ${DATABASE_HOST:-db}
  DATABASE_NAME: ${DATABASE_NAME:-vapor_database}
  DATABASE_USERNAME: ${DATABASE_USERNAME:-vapor_username}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD:-vapor_password}
  
services:
  app:
    image: {{name_kebab}}:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    ports:
      - "${SERVER_PORT:-8080}:${SERVER_PORT:-8080}"
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "production", "--hostname", "${SERVER_HOST:-0.0.0.0", "--port", "${SERVER_PORT:-8080}"]
  migrate:
    image: {{name_kebab}}:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--yes"]
    deploy:
      replicas: 0
  revert:
    image: {{name_kebab}}:latest
    build:
      context: .
    environment:
      <<: *shared_environment
    depends_on:
      - db
    command: ["migrate", "--revert", "--yes"]
    deploy:
      replicas: 0{{#fluent.is_postgres}}
  db:
    image: postgres
    volumes:
      - db_data:/var/lib/postgresql/data/pgdata
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: ${DATABASE_USERNAME:-vapor_username}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-vapor_password}
      POSTGRES_DB: ${DATABASE_NAME:-vapor_database}
    ports:
      - "${PORT:-5432}:${PORT:-5432}"{{/fluent.is_postgres}}{{#fluent.is_mysql}}
  db:
    image: mysql
    volumes:
      - db_data:/var/lib/mysql
    environment:
      MYSQL_USER: ${DATABASE_USERNAME:-vapor_username}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD:-vapor_password}
      MYSQL_DATABASE: ${DATABASE_NAME:-vapor_database}
      MYSQL_RANDOM_ROOT_PASSWORD: 'yes'
    ports:
      - "${PORT:-3306}:${PORT:-3306}'{{/fluent.is_mysql}}